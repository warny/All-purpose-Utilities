name: Publish NuGet

on:
    push:
        branches:
            - release

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                dotnet-version: ['9.0.x']
        steps:
            - uses: actions/checkout@v2
            - name: Setup .NET ${{ matrix.dotnet-version }}
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: ${{ matrix.dotnet-version }}
            - name: Restore
              run: dotnet restore
            - name: Build
              run: dotnet build --configuration Release
            - name: Pack and publish updated libraries
              env:
                  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
              shell: pwsh
              run: |
                  $projects = @(
                      "Utils/Utils.csproj",
                      "Utils.Data/Utils.Data.csproj",
                      "Utils.Fonts/Utils.Fonts.csproj",
                      "Utils.Geography/Utils.Geography.csproj",
                      "Utils.IO/Utils.IO.csproj",
                      "Utils.DependencyInjection/Utils.DependencyInjection.csproj",
                      "Utils.DependencyInjection.Generators/Utils.DependencyInjection.Generators.csproj",
                      "Utils.Imaging/Utils.Imaging.csproj",
                      "Utils.Mathematics/Utils.Mathematics.csproj",
                      "Utils.Reflection/Utils.Reflection.csproj",
                      "Utils.VirtualMachine/Utils.VirtualMachine.csproj",
                      "Utils.Net/Utils.Net.csproj"
                  )
                  New-Item -ItemType Directory -Path packages -Force | Out-Null
                  $errors = @()
                  foreach ($csproj in $projects) {
                      $pkgId = (Select-String -Path $csproj -Pattern '<PackageId>([^<]+)' -First 1).Matches[0].Groups[1].Value
                      $version = (Select-String -Path $csproj -Pattern '<Version>([^<]+)' -First 1).Matches[0].Groups[1].Value
                      $url = "https://api.nuget.org/v3-flatcontainer/$($pkgId.ToLower())/index.json"
                      $versions = @()
                      try {
                          $versions = (Invoke-RestMethod -Uri $url -ErrorAction Stop).versions
                      } catch {
                          $versions = @()
                      }
                      if ($versions -contains $version) {
                          Write-Host "Skipping $pkgId version $version"
                          continue
                      }
                      try {
                          dotnet pack $csproj --configuration Release --no-build --no-restore -o packages -p:ContinuousIntegrationBuild=true
                      } catch {
                          $errors += "Error packing $pkgId version $($version): $($_.Exception.Message)"
                          continue
                      }
                      $pushOutput = dotnet nuget push "packages/$pkgId.$version.nupkg" --api-key $env:NUGET_API_KEY --source "https://api.nuget.org/v3/index.json" 2>&1
                      if ($LASTEXITCODE -ne 0) {
                          $errors += "Error publishing $pkgId version $($version): $pushOutput"
                          continue
                      }
                      if (Test-Path "packages/$pkgId.$version.snupkg") {
                          dotnet nuget push "packages/$pkgId.$version.snupkg" --api-key $env:NUGET_API_KEY --source "https://api.nuget.org/v3/index.json" | Out-Null
                      }
                  }
                  if ($errors.Count -gt 0) {
                      $errors | ForEach-Object { Write-Host $_ }
                      exit 1
                  }
