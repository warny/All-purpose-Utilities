using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Utils.Net.DNS.RFC1035;
using Utils.Net.DNS;

namespace UtilsTest.Net
{
    [TestClass]
    public class RFC1035Tests
    {
        [TestMethod]
        public void ReadAReponse()
        {
            var datagram = new byte[] {
                0x3D, 0x20, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
                0x06, 0x67, 0x6F, 0x6F, 0x67, 0x6C, 0x65, 0x02, 0x66, 0x72, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xC0,
                0x0C, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x04, 0x00, 0x04, 0xD8, 0x3A, 0xD6, 0x43
            };

            DNSHeader header = new DNSHeader(datagram);

            var dnsRequestRecord = header.Requests[0];
            Assert.AreEqual("www.google.fr", dnsRequestRecord.Name);
            Assert.AreEqual(DNSClass.ALL, dnsRequestRecord.Class);
            Assert.AreEqual("A", dnsRequestRecord.Type);

            Assert.IsTrue(header.Responses.Count == 1);
            var dnsResponse = header.Responses[0];
            var ARecord = (A)dnsResponse.RData;
            Assert.AreEqual("www.google.fr", dnsResponse.Name);
            Assert.AreEqual("216.58.214.67", ARecord.IPAddress.ToString());

        }

        [TestMethod]
        public void ReadMXReponse()
        {
            var datagram = new byte[] {
                0x78, 0xF4, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0A, 0x05, 0x67, 0x6D,
                0x61, 0x69, 0x6C, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x0F, 0x00, 0xFF, 0xC0, 0x0C, 0x00,
                0x0F, 0x00, 0x01, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x1B, 0x00, 0x05, 0x0D, 0x67, 0x6D, 0x61,
                0x69, 0x6C, 0x2D, 0x73, 0x6D, 0x74, 0x70, 0x2D, 0x69, 0x6E, 0x01, 0x6C, 0x06, 0x67, 0x6F,
                0x6F, 0x67, 0x6C, 0x65, 0xC0, 0x12, 0xC0, 0x0C, 0x00, 0x0F, 0x00, 0x01, 0x00, 0x00, 0x0E,
                0x10, 0x00, 0x09, 0x00, 0x0A, 0x04, 0x61, 0x6C, 0x74, 0x31, 0xC0, 0x29, 0xC0, 0x0C, 0x00,
                0x0F, 0x00, 0x01, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x09, 0x00, 0x14, 0x04, 0x61, 0x6C, 0x74,
                0x32, 0xC0, 0x29, 0xC0, 0x0C, 0x00, 0x0F, 0x00, 0x01, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x09,
                0x00, 0x1E, 0x04, 0x61, 0x6C, 0x74, 0x33, 0xC0, 0x29, 0xC0, 0x0C, 0x00, 0x0F, 0x00, 0x01,
                0x00, 0x00, 0x0E, 0x10, 0x00, 0x09, 0x00, 0x28, 0x04, 0x61, 0x6C, 0x74, 0x34, 0xC0, 0x29,
                0xC0, 0x29, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x04, 0xAD, 0xC2, 0x4C,
                0x1B, 0xC0, 0x29, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x10, 0x2A, 0x00,
                0x14, 0x50, 0x40, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0xC0,
                0x50, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x04, 0xD1, 0x55, 0xE9, 0x1A,
                0xC0, 0x50, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x10, 0x2A, 0x00, 0x14,
                0x50, 0x40, 0x10, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xC0, 0x65,
                0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x04, 0xAC, 0xFD, 0x76, 0x1B, 0xC0,
                0x65, 0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x10, 0x24, 0x04, 0x68, 0x00,
                0x40, 0x03, 0x0C, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0xC0, 0x7A, 0x00,
                0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x04, 0x6C, 0xB1, 0x61, 0x1A, 0xC0, 0x7A,
                0x00, 0x1C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x10, 0x24, 0x04, 0x68, 0x00, 0x40,
                0x08, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0xC0, 0x8F, 0x00, 0x01,
                0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x04, 0x8E, 0xFA, 0x6B, 0x1A, 0xC0, 0x8F, 0x00,
                0x1C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x10, 0x26, 0x07, 0xF8, 0xB0, 0x40, 0x0E,
                0x0C, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B
            };

            DNSHeader header = new DNSHeader(datagram);

            var dnsRequestRecord = header.Requests[0];
            Assert.AreEqual("gmail.com", dnsRequestRecord.Name);
            Assert.AreEqual(DNSClass.ALL, dnsRequestRecord.Class);
            Assert.AreEqual("MX", dnsRequestRecord.Type);

            var expectedResponses = new (string Name, ushort Priority, string Exchange)[] {
                ("gmail.com", 5 , "gmail-smtp-in.l.google.com"),
                ("gmail.com", 10, "alt1.gmail-smtp-in.l.google.com"),
                ("gmail.com", 20, "alt2.gmail-smtp-in.l.google.com"),
                ("gmail.com", 30, "alt3.gmail-smtp-in.l.google.com"),
                ("gmail.com", 40, "alt4.gmail-smtp-in.l.google.com")
            };
            for (int i = 0; i < 5; i++)
            {
                var expectedResponse = expectedResponses[i];
                var response = header.Responses[i];
                var MXResponse = (MX)response.RData;
                Assert.AreEqual(expectedResponse.Name, response.Name);
                Assert.AreEqual(expectedResponse.Priority, MXResponse.Preference);
                Assert.AreEqual(expectedResponse.Exchange, MXResponse.Exchange);
            }

            var expectedAdditionals = new (string Name, string Type, string Adress, uint TTL)[]{
                ("gmail-smtp-in.l.google.com", "A", "173.194.76.27", 299),
                ("gmail-smtp-in.l.google.com", "AAAA", "2a00:1450:400c:c00::1a", 299),
                ("alt1.gmail-smtp-in.l.google.com", "A", "209.85.233.26", 299),
                ("alt1.gmail-smtp-in.l.google.com", "AAAA", "2a00:1450:4010:c03::1b", 299),
                ("alt2.gmail-smtp-in.l.google.com", "A", "172.253.118.27", 194),
                ("alt2.gmail-smtp-in.l.google.com", "AAAA", "2404:6800:4003:c05::1a", 194),
                ("alt3.gmail-smtp-in.l.google.com", "A", "108.177.97.26", 299),
                ("alt3.gmail-smtp-in.l.google.com", "AAAA", "2404:6800:4008:c00::1a", 299),
                ("alt4.gmail-smtp-in.l.google.com", "A", "142.250.107.26", 299),
                ("alt4.gmail-smtp-in.l.google.com", "AAAA", "2607:f8b0:400e:c0d::1b", 299)
            };

            for (int i = 0; i < 10; i++)
            {
                var expectedAdditional = expectedAdditionals[i];
                var additionnal = header.Additionnals[i];
                Assert.AreEqual(expectedAdditional.Name, additionnal.Name);
                Assert.AreEqual(expectedAdditional.TTL, additionnal.TTL);
                Assert.AreEqual(expectedAdditional.Type, additionnal.RData.Name);
                Assert.AreEqual(expectedAdditional.Adress, additionnal.RData.ToString());
            }

        }

    }
}
