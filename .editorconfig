# AGENTS Guidelines

This repository targets **.NET 9** (C#).  
All rules below are **mandatory** unless explicitly marked as *Recommended*.

---

## Documentation
- **All classes, methods, and significant private members must be documented in English.**  
  Use XML documentation comments (`///`) and keep them up to date.
- Methods that handle **data streams** or **binary transformations** must include clear comments about:
  - input/output formats  
  - ownership/disposal of streams  
  - buffering and performance considerations  

**Recommended**  
- Enable analyzers that enforce XML documentation (e.g., StyleCop SA1600 family) and treat warnings as errors for public APIs.  

---

## Design Principles
- Apply **Separation of Concerns**:  
  - **Data classes** (DTOs/records) hold data only; no business logic.  
  - **Processing classes/services** contain logic; they must not store mutable shared state.  
- Depend on **interfaces** for processing logic. Use **generic interfaces** when they improve reuse and testability.  
- Prefer **dependency injection** for concrete implementations. Avoid service location and static singletons.  

**Recommended**  
- Favor **immutability** (records, `init` accessors) for data types.  
- Use **async**/`Task`-based APIs for I/O-bound operations.  

---

## Testing
- **Every change must include at least one test** (unit, integration, or contract) covering the behavior change.  
- The only exception: changes limited to **library metadata** (e.g., package description).  

**Recommended**  
- Add regression tests for bug fixes.  
- Keep tests deterministic and fast; use test doubles for external I/O.  

---

## README
- The project’s **README.md** must include:  
  - an **example snippet** showing basic usage  
  - build/test instructions  
  - versioning/compatibility notes when applicable  

---

## Coding Standards
- **Indentation:** spaces only, **4 spaces per level** (enforced by `.editorconfig`).  
- **Arrays:** use bracket syntax `T[]` (e.g., `byte[]`, `int[]`), not `Array` in signatures.  
- **`params`:**  
  - In C#, `params` is only valid for **arrays** (`params T[]`).  
  - If sequential iteration is required and callers don’t need `params` convenience, prefer a plain `IEnumerable<T>` parameter (without `params`).  
- **File reading methods:**  
  - Must **only open the file/stream**, and  
  - Delegate content processing to a separate method that accepts a `Stream`, `ReadOnlySpan<byte>`, or `TextReader`.  
- **Large `switch` statements** (more than **10 cases** or **30 lines**) must be replaced with one of:  
  - **Strategy map**: `Dictionary<TKey, Func<...>>` (or method group) for simple dispatch  
  - **Type map**: `Dictionary<TKey, IHandler>` (Strategy/Command pattern) when behavior is complex  
  - **Pattern matching / switch expressions** when they improve clarity and testability  
- Prefer **expression-bodied members** for simple forwarding code.  
- Enable **nullable reference types** and resolve all warnings.  

**Recommended**  
- Use `Span<T>/ReadOnlySpan<T>` for performance-sensitive binary operations.  
- Validate public method arguments and throw the most specific exception type.  

---

## Performance & Reliability
- Dispose of `IDisposable` resources deterministically (`using`/`await using`).  
- Avoid unnecessary allocations in tight loops and I/O paths.  
- Log at appropriate levels; never log secrets or PII.  

---

## Tooling & Automation
- Enforce formatting and analyzers via CI (e.g., `dotnet format`, StyleCop/Roslyn analyzers).  
- Add **pre-commit hooks** to run formatting and tests locally.  
